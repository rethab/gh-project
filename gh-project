#!/bin/bash
set -e

cmd=$1
shift

list_projects() {
  local path=$1
  TEMPLATE='{{tablerow "ID" "Name" "URL"}}{{range .}}{{tablerow .id .name .html_url}}{{end}}'
  exec gh api --preview inertia "${path}/projects" --template="$TEMPLATE"
}

list_projects_help() {
  echo "List projects from an organisation, a user or a repository"
  echo ""
  echo "Without flags, projects from the current repository are listed"
  echo ""
  echo "USAGE"
  echo "  gh project list [flags]"
  echo ""
  echo "FLAGS"
  printf "  --org organisation\tList projects from organisation\n"
  printf "  -u, --user user\tList projects from user\n"
  printf "  -o, --owner owner\tList projects from owner (requires repository)\n"
  printf "  -r, --repository repository\tList projects from repository (requires owner)\n"
  echo ""
  echo "INHERITED FLAGS"
  echo "  --help Show help for command"
  echo ""
  echo "EXAMPLES"
  echo "  $ gh project list"
  echo "  $ gh project list --org my-corporation"
  echo "  $ gh project list --owner rethab --repository gh-project"
}

list_columns() {
  local project_id="$1"
  TEMPLATE='{{tablerow "ID" "Name" }}{{range .}}{{tablerow .id .name }}{{end}}'
  exec gh api --preview inertia "projects/${project_id}/columns" --template="$TEMPLATE"
}

list_columns_help() {
  echo "List columns in a project"
  echo ""
  echo "USAGE"
  echo "  gh project list-columns [flags]"
  echo ""
  echo "FLAGS"
  printf "  -p, --project id\tId of the project. Use the \"list\" command to show projects\n"
  echo ""
  echo "INHERITED FLAGS"
  echo "  --help Show help for command"
  echo ""
  echo "EXAMPLES"
  echo "  $ gh project list-columns --project 12789786"
}

list_cards() {
  local column_id="$1"
  shift

  TEMPLATE='{{tablerow "ID" "Note" }}{{range .}}{{tablerow .id .note }}{{end}}'
  exec gh api "/projects/columns/${column_id}/cards" --template="$TEMPLATE"
}

list_cards_help() {
  echo "List cards in a column"
  echo ""
  echo "USAGE"
  echo "  gh project list-cards [flags]"
  echo ""
  echo "FLAGS"
  printf "  -c, --column id\tColumn from which to list cards. Use \"list-column\" to show columns\n"
  echo ""
  echo "INHERITED FLAGS"
  echo "  --help Show help for command"
  echo ""
  echo "EXAMPLES"
  echo "  $ gh project list-cards --column 1489862"
}

create_card() {
  local owner="$1"
  shift
  local column_id="$1"
  shift
  local issue_repo="$1"
  shift
  local title=$*

  issue_id=$(gh api "/repos/${owner}/${issue_repo}/issues" -f title="$title" --jq '.id')

  content_url=$(gh api --preview inertia "/projects/columns/${column_id}/cards" -F content_id="$issue_id" -f content_type=Issue --jq '.content_url')

  echo "$content_url" | sed s/api.// | sed s-repos/--
}

create_card_help() {
  echo "Create a new card in a project"
  echo ""
  echo "The content of a card is based on an issue, which is going to be created as part of this command."
  echo ""
  echo "USAGE"
  echo "  gh project create-card [flags]"
  echo ""
  echo "FLAGS"
  printf "  -o, --owner owner \t\tOwner/organization to create the card in. Defaults to the owner of the current repository.\n"
  printf "  -c, --column id \t\tColumn in which to create card. Use \"list-column\" to show columns\n"
  printf "  -r, --issue-repository name\tName of the repository in which to create the issue\n"
  printf "  -t, --title string\t\tTitle of the card\n"
  echo ""
  echo "INHERITED FLAGS"
  echo "  --help Show help for command"
  echo ""
  echo "EXAMPLES"
  echo "  $ gh project create-card --column 1489862 --issue-repository backend-service --title \"implement new feature\""
}

move_card() {
  local card_id="$1"
  local position="$2"
  local column_id="$3"

  if [ -z "$column_id" ]; then
    exec gh api "/projects/columns/cards/$card_id/moves" -f "position=$position"
  else
    exec gh api "/projects/columns/cards/$card_id/moves" -f "position=$position" -F "column_id=$column_id"
  fi
}

move_card_help() {
  echo "Move a card within a column or to a different column"
  echo ""
  echo "USAGE"
  echo "  gh project move-card [flags]"
  echo ""
  echo "FLAGS"
  printf "  -c, --card card_id\t\tCard to move. Use \"list-cards\" to show cards\n"
  printf "  -p, --position position\tPosition to move the card to. Options: top, bottom, after:<card_id>. Defaults to top\n"
  printf "  --column column_id\t\tID of the column to move to. If omitted, card is moved within column\n"
  echo ""
  echo "INHERITED FLAGS"
  echo "  --help Show help for command"
  echo ""
  echo "EXAMPLES"
  echo "  $ gh project move-card --card 69500449 --position top --column 16122294"
}


show_help() {
  echo "Work with GitHub Projects"
  echo ""
  echo "USAGE"
  echo "  gh project <command> [flags]"
  echo ""
  echo "CORE COMMANDS"
  printf "  list\t\tList projects\n"
  printf "  list-columns\tList columns in project\n"
  printf "  list-cards\tList cards in a column\n"
  printf "  create-card\tCreate a new issue and add it as a card to a column\n"
  printf "  move-card\tMove card to a different column or within a column\n"
  echo ""
  echo "SHOW COMMAND HELP AND USAGE"
  echo "  $ gh project <command> --help"
  echo ""
  echo "INHERITED FLAGS"
  echo "  --help Show help for command"
  echo ""
  echo "EXAMPLES"
  echo "  $ gh project list"
}

require_arg() {
  local flag="$1"
  echo "$flag requires an argument"
  exit 1
}


case "$cmd" in
  list)
    while [ "${1:-}" != "" ]; do
        case "$1" in
            -u|--user)
                user="$2"
                shift 2 || require_arg "user"
                ;;
            --org)
                org="$2"
                shift 2 || require_arg "org"
                ;;
            -o|--owner)
                owner="$2"
                shift 2 || require_arg "owner"
                ;;
            -r|--repository)
                repository="$2"
                shift 2 || require_arg "repository"
                ;;
            -h|--help)
                list_projects_help
                exit 0
                ;;
            *)
                echo "Unexpected argument: $1"
                show_help
                exit 1
                ;;
        esac
    done

    if [[ -n "$user" ]]; then
      path="/users/$user"
      [[ -n "$org$owner$repository" ]] && { echo "invalid flags in combination with user"; exit 1; }
    elif [[ -n "$org" ]]; then
      path="/orgs/$org"
      [[ -n "$owner$repository" ]] && { echo "invalid flags in combination with org"; exit 1; }
    elif [[ -n "$owner" && -n "$repository" ]]; then
      path="/repos/$owner/$repository"
    else
      path="/repos/{owner}/{repo}"
    fi

    list_projects "$path"
    ;;
  list-columns)
    while [ "${1:-}" != "" ]; do
        case "$1" in
            -p|--project)
                project_id="$2"
                shift 2 || require_arg "project"
                ;;
            -h|--help)
                list_columns_help
                exit 0
                ;;
            *)
                echo "Unexpected argument: $1"
                show_help
                exit 1
                ;;
        esac
    done
    [[ -z "$project_id" ]] && { echo "Missing project"; exit 1; }
    list_columns "$project_id"
    ;;
  list-cards)
    owner='{owner}'
    while [ "${1:-}" != "" ]; do
        case "$1" in
            -c|--column)
                column_id="$2"
                shift 2 || require_arg "column"
                ;;
            -h|--help)
                list_cards_help
                exit 0
                ;;
            *)
                echo "Unexpected argument: $1"
                show_help
                exit 1
                ;;
        esac
    done

    [[ -z "$column_id" ]] && { echo "Missing column"; exit 1; }
    list_cards "$column_id"
    ;;
  create-card)
    owner='{owner}'
    while [ "${1:-}" != "" ]; do
        case "$1" in
            -o|--owner)
                owner="$2"
                shift 2 || require_arg "owner"
                ;;
            -c|--column)
                column_id="$2"
                shift 2 || require_arg "column"
                ;;
            -r|--issue-repository)
                issue_repository="$2"
                shift 2 || require_arg "repository"
                ;;
            -t|--title)
                title="$2"
                shift 2 || require_arg "title"
                ;;
            -h|--help)
                create_card_help
                exit 0
                ;;
            *)
                echo "Unexpected argument: $1"
                show_help
                exit 1
                ;;
        esac
    done

    [[ -z "$column_id" ]] && { echo "Missing column"; exit 1; }
    [[ -z "$issue_repository" ]] && { echo "Missing issue-repository"; exit 1; }
    [[ -z "$title" ]] && { echo "Missing title"; exit 1; }
    create_card "$owner" "$column_id" "$issue_repository" "$title"
    ;;
  move-card)
    while [ "${1:-}" != "" ]; do
        case "$1" in
            -c|--card)
                card_id="$2"
                shift 2 || require_arg "card"
                ;;
            -p|--position)
                position="$2"
                shift 2 || require_arg "position"
                ;;
            --column)
                column_id="$2"
                shift 2 || require_arg "column"
                ;;
            -h|--help)
                move_card_help
                exit 0
                ;;
            *)
                echo "Unexpected argument: $1"
                show_help
                exit 1
                ;;
        esac
    done

    [[ -z "$card_id" ]] && { echo "Missing card"; exit 1; }
    [[ -z "$position" ]] && { position="top"; }
    move_card "$card_id" "$position" "$column_id"
    ;;
  --help)
    show_help
    ;;
  *)
    echo "Invalid command '$cmd'"
    show_help
    exit 1
    ;;
esac
